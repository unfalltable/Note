---
title: 缓存
categories: 模块
tags: [模块]
---

## 查询缓存

```java
public Shop queryById(Long id) {
    // 1.获取需要查询的业务的key
    // 2.从redis查询对应key的缓存
    // 3.判断是否存在
    	// 3.1.存在直接返回
    // 4.不存在，查询数据库
    // 5.判断数据是否存在
    	// 5.1.不存在返回错误
    // 6.存在写入redis
    // 7.返回数据
}
```

## 缓存雪崩

## 缓存击穿

### 互斥锁

```java
public <R, ID> R queryWithMutex(
    String keyPrefix, ID id, Class<R> type, Function<ID, R> dbFallback, Long time, TimeUnit unit) {
    //设置要查询的key（业务前缀 + id）
    // 1.从redis查询商铺缓存
    // 2.判断是否存在
        // 3.存在，直接返回
    // 判断命中的是否是空值
        // 是空值，返回一个错误信息
    // 4.实现缓存重建
        // 4.1.获取互斥锁
        // 4.2.判断是否获取成功
            // 4.3.获取锁失败，休眠并重试
            //重新尝试获取锁
        // 4.4.获取锁成功，根据id查询数据库
        	// 5.不存在，返回错误
            	// 将空值写入redis
            	// 返回错误信息
        	// 6.存在，写入redis
        // 7.释放锁
    // 8.返回
}
```

### 逻辑过期

```java
//开启线程池
//逻辑过期解决缓存击穿
public <R, ID> R queryWithLogicalExpire(
    String keyPrefix, ID id, Class<R> type, Function<ID, R> dbFallback, Long time, TimeUnit unit) {
    //设置要查询的key（业务前缀 + id）
    // 1.从redis查询商铺缓存
    // 2.判断是否存在
        // 3.未命中，直接返回
    // 4.命中，需要先把json反序列化为对象
    //获取缓存过期时间
    // 5.判断是否过期
        // 5.1.未过期，直接返回店铺信息
    // 5.2.已过期，需要缓存重建
    // 6.缓存重建
        // 6.1.获取互斥锁
        // 6.2.判断是否获取锁成功
            // 6.3.成功，开启独立线程，实现缓存重建
                // 查询数据库
                // 调用重建缓存
                // 释放锁
        // 6.4.返回过期的商铺信息
    
//缓存重建方法，使用自定义RedisData包装数据
    //重新设置逻辑过期时间
//RedisData
class RedisData{
    private LocalDateTime time;
    private Object data;
}
```

## 缓存穿透

### 缓存空对象

```java
public <R,ID> R queryWithPassThrough(String keyPrefix, ID id, 
        Class<R> type,Function<ID, R> dbFallback,Long time, TimeUnit unit ){
    //设置要查询的key（业务前缀 + id）
    // 1.从redis查询商铺缓存
    // 2.判断是否存在
        // 3.存在，直接返回
            // 判断命中的是否是空值，即redis保存的是否是空对象
            // 不是空，返回一个错误信息
    // 4.不存在，根据id查询数据库
    // 5.数据库不存在，返回错误
        // 将空值写入redis
        // 返回错误信息
    // 6.存在，写入redis
}
```

